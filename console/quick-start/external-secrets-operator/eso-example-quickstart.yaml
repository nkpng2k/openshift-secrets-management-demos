apiVersion: console.openshift.io/v1
kind: ConsoleQuickStart
metadata:
  name: external-secrets-operator-example
spec:
  displayName: External Secrets Operator Example
  tags:
    - example
    - operator
  durationMinutes: 10
  prerequisites:
    - You completed the "Install the external secrets operator for Red Hat OpenShift" quick start.
    - You have access to a running secret management system (ex. CyberArk Conjur, HashiCorp Vault, etc.)
    - You know the authentication method configured for your selected secret management system
    - You have a set of test secrets that you can use for the example.
    - You have a namespace in which to deploy the example CRs and workloads.
  description: |-
    Deploy simple examples of the external secrets operator CRDs
  introduction: |-
    # External Secrets Operator for Red Hat OpenShift

    The external secrets operator enables you to bring secrets or other "confidential material" into an OpenShift cluster
    from an external source such as CyberArk Conjur, HashiCorp Vault, or any of the cloud service provider secrets managers.

    ### Expected Learning
    
    With this Quick Start, you will learn about the following CRDs provided by the external secrets operator:
    1. SecretStore (and ClusterSecretStore for cluster scoped secret management)
    2. ExternalSecret (and ClusterExternalSecret for cluster scoped secrets)

    This Quick Start will walk you through the process of creating a SecretStore and pointing it to a
    running secrets management system and creating an ExternalSecret to request a secret or credential
    from the SecretStore.
  tasks:
    - title: Navigate to installed external secrets operator
      description: |-
        ### To navigate to the installed operator:
        1. From the **Administrators** perspective, go to the **Installed Operators** from the [Operators]{{highlight qs-nav-operators}} section of the navigation.
        2. In the **Search by name** field, type `External Secrets Operator`.
        3. Look for **External Secrets Operator for Red Hat OpenShift**. If you had completed the prerequisite Quick Start, the tile should appear.
        4. Click on the installed operator
        
        You will be brought to the **Operator Details** page and be presented with **Provided APIs**
      review:
        instructions: |-
          #### Verify you see a list of **Provided APIs**:
          The list should include `SecretStore` and `ExternalSecret`
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: You are in the right place, and ready to start the rest of the Quick Start
        failed: Try the steps again.
    - title: Select a project
      description: |-
        ### Create or select a project to work in
        1. Find the **Project** dropdown menu at the top of the screen.
        2. Select or create the project in which you want to work in.
      review:
        instructions: |-
          #### Verify the name in the **Project** dropdown menu is the expected project
        failedTaskHelp: Try the task again.
      summary:
        success: You are in the right place.
        failed: Try the steps again.
    - title: Create a SecretStore
      description: |-
        ### To create a SecretStore on the OpenShift Cluster
        1. Find the `SecretStore` Custom Resource in the list of **Provided APIs** or in the top side-scrolling menu bar
          - From the list of **Provided APIs** click the **Create instance** link
          - From the **top side-scrolling menu bar** click **SecretStore** and then click **Create SecretStore**
        2. Fill in the required fields for a `SecretStore` via the form **OR** click the **YAML View** to edit the manifest directly.
          - NOTE: this includes knowing several pieces of information to properly fill in the `spec.provider` fields.
          this will also include, knowing the authentication method for the `provider` and posessing any necessary credentials,
          certificates, tokens, etc. necessary to authenticate against the secret management system chosen.
          - In **YAML View** you can check the provided **Samples** on the right hand sidebar for some sample configurations.
        3. When you have filled out the necessary fields or yaml, click the **Create** button to proceed.
      review:
        instructions: |-
          #### Verify the SecretStore was successfully deployed:
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: You just deployed your first SecretStore. Take note of the name and namespace the SecretStore was deployed with.
        failed: Try the steps again.
    - title: Create an ExternalSecret
      description: |-
        ### To create a ExternalSecret on the OpenShift Cluster
        1. Find the `ExternalSecret` Custom Resource in the list of **Provided APIs** or in the top side-scrolling menu bar
          - From the list of **Provided APIs** click the **Create instance** link
          - From the **top side-scrolling menu bar** click **ExternalSecret** and then click **Create ExternalSecret**
        2. Fill in the required fields for an `ExternalSecret` via the form **OR** click the **YAML View** to edit the manifest directly.
          - In **YAML View** you can check the provided **Samples** on the right hand sidebar for some sample configurations.
        3. When you have filled out the necessary fields or yaml, click the **Create** button to proceed.
      review:
        instructions: |-
          #### Verify the ExternalSecret was successfully deployed:
          1. You should see a green checkmark for your newly created ExternalSecret. `Condition: Ready`
          2. Navigate to the [Workloads]{{highlight qs-nav-workloads}} section and click **Secrets**
          3. You should see a new Secret created with the name you provided to the ExternalSecret `target.name` field
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: You just deployed your first ExternalSecret
        failed: Try the steps again.
    - title: Deploy a sample application
      description: |-
        ### To deploy a sample application that consumes the managed Secret
        1. Proceed to the [Workloads]{{highlight qs-nav-workloads}} section and click **Pods**
        2. Click the **Create Pod** button
        3. Fill in the yaml with the following `spec`:

        ```
        spec:
          serviceAccountName: SERVICE_ACCOUNT_NAME
          securityContext:
            fsGroup: 2000
            runAsNonRoot: true
            runAsUser: 1000
          containers:
          - image: busybox:stable
            name: eso-demo
            command: ["sh", "-c", "while true; do sleep 3600; done"]
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
              runAsNonRoot: true
            env:
            - name: DEMO_PWD
              valueFrom:
                secretKeyRef:
                  name: NAME_OF_TARGET_SECRET
                  key: DATA_KEY_IN_TARGET_SECRET
            volumeMounts:
            - name: eso-demo-volume
              mountPath: "/mnt/demo-vol"
              readOnly: true
          volumes:
            - name: eso-demo-volume
              secret:
                secretName: NAME_OF_TARGET_SECRET
        ```
        4. Click the **Create* Button at the bottom of the screen
      review:
        instructions: |-
          #### Verify the Pod was successfully deployed:
          1. You should the pod deploy successfully
          2. Once the pod is successfully Running, click on the running pod
          3. Proceed to the **terminal** section
          4. Run the command `ls mnt/demo-vol/`. You should see a file with your secret.
          5. Run the command `echo $DEMO_PWD`. You should see your password output.
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: You just deployed your first application using externally managed secrets
        failed: Try the steps again.
<<<<<<< HEAD
  conclusion: 'You have successfully deployed a sample application with secrets managed by the external secrets operator!'
=======
>>>>>>> a1659bb (complete eso demo)
